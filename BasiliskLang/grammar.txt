program     =   definitions, instructions;

definitions =   definition, {definition};

definition  =   "def", identifier, '(', parameters, ')', ':', body;

parameters  =   identifier, {',', identifier};

body        =   '{', instructions, ["return", expression], '}';

instructions=   instruction, {instruction};

instruction =   block
                "if", '(', expression, ')', ':', instruction, ["else", ':', instruction]
                "while", '(', expression, ')', instruction
                expression;

block       =   '{', instructions, '}';

expression  =   assign_exp;

assign_exp  =   log_exp, {assign_op, log_exp};
 
assign_op   =   "=";

log_exp	    =   rel_exp, {log_op, rel_exp};

log_op	    =   "&&"
		"||";

rel_exp     =   add_exp, {rel_op, add_exp};
                    
rel_op	    =   "=="
		"!="
		">"
		">="
		"<"
		"<=";

add_exp	    =   mul_exp, {add_op, mul_exp};

add_op	    =   "+"
		"-";

mul_exp     =   un_exp, { mul_op, un_exp};

mul_op	    = 	"*"
		"/";
                    
un_exp	    =   ["-"], simple_exp;

simple_exp  =   int
                double
                string
                '(', expression, ')'
                identifier
                call;
                
call        =   identifier, ['.', identifier], '(', [arguments], ')';
                
arguments   =   expression, {',', expression};

int         =   [1-9][0-9]*|[0]

double      =   ([1-9][0-9]*([.][0-9]+)?|[0][.][0-9]+)

string      =   \"(\\[^n]|[^\\])*(\\)*\"

identifier  =   [a-zA-Z][a-zA-Z0-9]*