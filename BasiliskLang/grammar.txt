program     				=   definitions, statements;

definitions 				=   definition, {definition};

definition  				=   "def", identifier, '(', parameters, ')', ':', block;

parameters  				=   [identifier, {',', identifier}];

assignable  				=   identifier, ['.', identifier];

statements                  		=   { statement };

block       				=   '{', statements, '}';

statement 				=   if_statement
                                	    while_statement
                                	    return_statement
                                	    assignable, assignable_statement;
                                
assignable_statement        		=   assign_statement
                                	    function_call_statement;

if_statement    			=   "if", '(', logic_expression, ')', ':', block, ["else", ':', block];

while_statement 			=   "while", '(', logic_expression, ')', block;

return_statement			=   "return", logic_expression;

function_call_statement     		=   assignable, '(', [arguments], ')';

arguments   				=   logic_expression, {',', logic_expression};

logic_expression	    		=   relation_expression, {logic_operator, relation_expression};

relation_expression     		=   additive_expression, {relation_operator, additive_expression};

additive_expression	        	=   multiplicative_expression, {additive_operator, multiplicative_expression};

multiplicative_expression   		=   unary_expression, { multiplicative_operator, unary_expression};

unary_expression	    		=   ["-"], value_expression;

value_expression  		    	=   int
                                	    float
                                	    string
                                	    grouped_expression
                                	    assignable, [ function_call_expression ]

function_call_expression    		=   assignable, '(', [arguments], ')';

grouped_expression          		= '(', expression ')'